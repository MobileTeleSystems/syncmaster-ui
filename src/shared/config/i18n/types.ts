export enum Language {
  EN = 'en',
  RU = 'ru',
}

export interface Translation {
  error: {
    access: string;
    notFound: string;
    internalServer: string;
    backHome: string;
    unexpectedErrorOccurred: string;
    invalidValue: string;
    formErrorHasOccurred: string;
    fieldIsRequired: string;
    fieldPatternInvalid: string;
    invalidRegularExpression: string;
  };
  auth: {
    signIn: string;
    username: string;
    password: string;
    authType: string;
    guest: string;
    developer: string;
    maintainer: string;
    owner: string;
    superuser: string;
  };
  queue: {
    queue: string;
    queues: string;
    createQueue: string;
    updateQueue: string;
    deleteQueue: string;
    createQueueSuccess: string;
    updateQueueSuccess: string;
    deleteQueueSuccess: string;
    deleteQueueConfirm: string;
    needToSelectGroupToSeeQueueList: string;
    needToSelectGroupToCreateQueue: string;
    notPermissionToCreateQueue: string;
    queueInfo: string;
    selectQueue: string;
  };
  connection: {
    connection: string;
    connections: string;
    createConnection: string;
    updateConnection: string;
    deleteConnection: string;
    createConnectionSuccess: string;
    updateConnectionSuccess: string;
    deleteConnectionSuccess: string;
    deleteConnectionConfirm: string;
    needToSelectGroupToSeeConnectionList: string;
    needToSelectGroupToCreateConnection: string;
    notPermissionToCreateConnection: string;
    sourceConnectionInfo: string;
    targetConnectionInfo: string;
    connectionSettings: string;
    selectConnectionType: string;
    sourceConnection: string;
    targetConnection: string;
    selectSourceConnection: string;
    selectTargetConnection: string;
    connectionsSettings: string;
    accessKey: string;
    secretKey: string;
    selectProtocol: string;
    databaseName: string;
    host: string;
    port: string;
    cluster: string;
    serviceName: string;
    serviceNameOrSidRequired: string;
    sid: string;
    protocol: string;
    bucketStyle: string;
    bucket: string;
    region: string;
    selectBucketStyle: string;
    share: string;
    domain: string;
    connectionInfo: string;
  };
  file: {
    b: string;
    kb: string;
    mb: string;
    gb: string;
    fileFormat: string;
    selectFileFormat: string;
    compression: string;
    selectCompression: string;
    delimiter: string;
    encoding: string;
    quote: string;
    escape: string;
    includeHeader: string;
    lineSeparator: string;
    yes: string;
    no: string;
    startCell: string;
    rootTag: string;
    rowTag: string;
    filenameTemplate: string;
    fileModifiedSince: string;
    filename: string;
    fileFormatSettings: string;
    fileSizeUnit: string;
    useFollowingPlaceholders: string;
    lettersNumbersAndSymbols: string;
  };
  group: {
    group: string;
    groups: string;
    createGroup: string;
    updateGroup: string;
    createGroupSuccess: string;
    updateGroupSuccess: string;
    updateUserRoleSuccess: string;
    deleteGroupSuccess: string;
    addUserToGroupSuccess: string;
    updateUserInGroup: string;
    deleteUserFromGroup: string;
    deleteUserFromGroupConfirm: string;
    groupMembers: string;
    warning: string;
    addUser: string;
    addUserToGroup: string;
    user: string;
    role: string;
    groupInfo: string;
    selectUser: string;
    selectGroup: string;
    selectRole: string;
  };
  run: {
    run: string;
    createRunSuccess: string;
    runTransferConfirm: string;
    transferRuns: string;
    runTransfer: string;
    runInfo: string;
    status: string;
    startedAt: string;
    endedAt: string;
    logUrl: string;
  };
  transfer: {
    transfer: string;
    transfers: string;
    createTransfer: string;
    updateTransfer: string;
    deleteTransfer: string;
    createTransferSuccess: string;
    updateTransferSuccess: string;
    deleteTransferSuccess: string;
    deleteTransferConfirm: string;
    needToSelectGroupToSeeTransferList: string;
    needToSelectGroupToCreateTransfer: string;
    notPermissionToCreateTransfer: string;
    transferAdvancedInfo: string;
    directoryPath: string;
    tableName: string;
    transferInfo: string;
    schedule: string;
    strategyParams: string;
    sourceParams: string;
    targetParams: string;
    incrementBy: string;
    selectIncrementBy: string;
    source: string;
    selectStrategy: string;
    full: string;
    incremental: string;
    target: string;
    basic: string;
    advanced: string;
  };
  transformation: {
    addItem: string;
    value: string;
    selectUnit: string;
    column: string;
    selectType: string;
    isNull: string;
    isNotNull: string;
    equal: string;
    notEqual: string;
    greaterThan: string;
    greaterOrEqual: string;
    lessThan: string;
    lessOrEqual: string;
    like: string;
    iLike: string;
    notLike: string;
    notILike: string;
    regexp: string;
    cast: string;
    include: string;
    rename: string;
    operator: string;
    transformationsControls: string;
    deleteNodeConfirm: string;
    filterRows: string;
    filterColumns: string;
    filterFile: string;
    fileSizeMin: string;
    fileSizeMax: string;
    nameGlob: string;
    nameRegexp: string;
  };
  shared: {
    submit: string;
    cancel: string;
    monday: string;
    tuesday: string;
    wednesday: string;
    thursday: string;
    friday: string;
    saturday: string;
    sunday: string;
    mondayOn: string;
    tuesdayOn: string;
    wednesdayOn: string;
    thursdayOn: string;
    fridayOn: string;
    saturdayOn: string;
    sundayOn: string;
    day: string;
    week: string;
    month: string;
    dayEvery: string;
    weekEvery: string;
    monthEvery: string;
    dayOfMonth: string;
    every: string;
    on: string;
    at: string;
    actions: string;
    add: string;
    remove: string;
    update: string;
    delete: string;
    id: string;
    name: string;
    description: string;
    type: string;
    required: string;
    mainInfo: string;
    confirm: string;
  };
}
